prmutaion and combination

1.C(n,r) = C(n-1,r) + C(n-1,r-1)
2.p(n,r) = p(n-1,r) + r * p(n-1,r-1)
3.permutations of n items of p of one tpe q of another type and r of another type = n!/(p! q! r!)
4.p(n,r)/p(n,r-1) = n - r +1
5.The total number of ways of selection of some or all of n thing at a time n(c,1)+ n(c,2)+......+n(c,n) = 2^n - 1
6.Number of ways in which N identical items can be divided into R groups so that no group contains less than M items and more than K items is coefficient of X^n in the expansion of (x^m+x^(n+1).......+x^k) ^ r
7.The total number of combination of n different objects taken R at a time in which
	a. m particular object are excluded = c(n-m,r)
	b. m particular objects are included = c(n-m,r-1)

converions::

integer  to string :: to_string(3.1415926)
integer to string :: stoi()

BFS :: 
		vector <int> v[10] ;   //Vector for maintaining adjacency list explained above
		    int level[10]; //To determine the level of each node
		    bool vis[10]; //Mark the node if visited 
		    void bfs(int s) {
		        queue <int> q;
		        q.push(s);
		        level[ s ] = 0 ;  //Setting the level of the source node as 0
		        vis[ s ] = true;
		        while(!q.empty())
		        {
		            int p = q.front();
		            q.pop();
		            for(int i = 0;i < v[ p ].size() ; i++)
		            {
		                if(vis[ v[ p ][ i ] ] == false)
		                {
		            //Setting the level of each node with an increment in the level of parent node
		                    level[ v[ p ][ i ] ] = level[ p ]+1;                 
		                     q.push(v[ p ][ i ]);
		                     vis[ v[ p ][ i ] ] = true;
		      }
		            }
		        }
		    }

MST::
		#include <iostream>
		#include <vector>
		#include <utility>
		#include <algorithm>

		using namespace std;
		const int MAX = 1e4 + 5;
		int id[MAX], nodes, edges;
		pair <long long, pair<int, int> > p[MAX];

		void initialize()
		{
		    for(int i = 0;i < MAX;++i)
		        id[i] = i;
		}

		int root(int x)
		{
		    while(id[x] != x)
		    {
		        id[x] = id[id[x]];
		        x = id[x];
		    }
		    return x;
		}

		void union1(int x, int y)
		{
		    int p = root(x);
		    int q = root(y);
		    id[p] = id[q];
		}

		long long kruskal(pair<long long, pair<int, int> > p[])
		{
		    int x, y;
		    long long cost, minimumCost = 0;
		    for(int i = 0;i < edges;++i)
		    {
		        // Selecting edges one by one in increasing order from the beginning
		        x = p[i].second.first;
		        y = p[i].second.second;
		        cost = p[i].first;
		        // Check if the selected edge is creating a cycle or not
		        if(root(x) != root(y))
		        {
		            minimumCost += cost;
		            union1(x, y);
		        }    
		    }
		    return minimumCost;
		}

		int main()
		{
		    int x, y;
		    long long weight, cost, minimumCost;
		    initialize();
		    cin >> nodes >> edges;
		    for(int i = 0;i < edges;++i)
		    {
		        cin >> x >> y >> weight;
		        p[i] = make_pair(weight, make_pair(x, y));
		    }
		    // Sort the edges in the ascending order
		    sort(p, p + edges);
		    minimumCost = kruskal(p);
		    cout << minimumCost << endl;
		    return 0;
		}


Dijkstra's Algorithm::

		#define SIZE 100000 + 1

		vector < pair < int , int > > v [SIZE];   // each vertex has all the connected vertices with the edges weights
		int dist [SIZE];
		bool vis [SIZE];

		void dijkstra(){
		                                                // set the vertices distances as infinity
		    memset(vis, false , sizeof vis);            // set all vertex as unvisited
		    dist[1] = 0;
		    multiset < pair < int , int > > s;          // multiset do the job as a min-priority queue

		    s.insert({0 , 1});                          // insert the source node with distance = 0

		    while(!s.empty()){

		        pair <int , int> p = *s.begin();        // pop the vertex with the minimum distance
		        s.erase(s.begin());

		        int x = p.s; int wei = p.f;
		        if( vis[x] ) continue;                  // check if the popped vertex is visited before
		         vis[x] = true;

		        for(int i = 0; i < v[x].size(); i++){
		            int e = v[x][i].f; int w = v[x][i].s;
		            if(dist[x] + w < dist[e]  ){            // check if the next vertex distance could be minimized
		                dist[e] = dist[x] + w;
		                s.insert({dist[e],  e} );           // insert the next vertex with the updated distance
		            }
		        }
		    }
		}



Topological sort ::
			topological_sort(N, adj[N][N])
			        T = []
			        visited = []
			        in_degree = []
			        for i = 0 to N
			                in_degree[i] = visited[i] = 0

			        for i = 0 to N
			                for j = 0 to N
			                        if adj[i][j] is TRUE
			                                in_degree[j] = in_degree[j] + 1

			        for i = 0 to N
			                if in_degree[i] is 0
			                        enqueue(Queue, i)
			                        visited[i] = TRUE

			        while Queue is not Empty
			                vertex = get_front(Queue)
			                dequeue(Queue)
			                T.append(vertex)
			                for j = 0 to N
			                        if adj[vertex][j] is TRUE and visited[j] is FALSE
			                                in_degree[j] = in_degree[j] - 1
			                                if in_degree[j] is 0
			                                        enqueue(Queue, j)
			                                        visited[j] = TRUE
			        return T




