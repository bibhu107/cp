Given an undirected colored graph(edges are colored), and a source vertex ‘s’ and a destination vertex ‘d’ , print number of paths which  from given ‘s’ to ‘d’ such that the path is UniColored(edges in path having same color).</font></p> 


<p><font size="2">Examples:</font></p> 
<pre>
Input : Graph
    source = 2   destination = 5             
                                  <img src="https://contribute.geeksforgeeks.org/wp-content/uploads/graph-1-4-e1517123228744.png" />
        
Output : 3
Explanation : There are three paths from 2 to reach three  2 -> 5 with color 4
                                                           2 -> 3 - > 5 with color 3
                                                           2 -> 4 - > 5  with color 2                 


</pre>

<!-- To show strongly recommend and practice link    -->
<div id="practice"></div>
 
<p><font size="2">
The Colored edges attached directly with  source only those colors have some chance to reach destination .
Let's first take the directly connected nodes .
Then doing dfs with those nodes  if we reach destination we include that node in answer. 
NOTE: Number of Colors will always be less than number of edges.

</font></p> 
[sourcecode language="CPP" highlight=""]
// C++ implementation of above algorithm: 
#include <bits/stdc++.h>
using namespace std;
const int N = 200009;
int color[N];
bool vis[N];

// Graph class represents a udirected graph
// using adjacency list representation
class Graph
{
    int V;    // No. of vertices
    int E;    // No. of edges
    vector< pair<int, int> > adj[N]; // adjacency lists

    // function used by UniColorPaths
    // DFS traversal o from x to y
    void dfs(int x, int y, int z);
 
    
public:
    Graph(int V, int E);   // Constructor
 
    // function to add an edge to graph
    void addEdge(int v, int w, int z);

    // finds paths between a and b having same color edges
    int UniColorPaths(int a, int b);
 
    
};

 Graph :: Graph( int V, int E)
{
  this->V = V;
  this->E = E;
}
void Graph::addEdge(int a, int b , int c)
{
    adj[a].push_back({b,c}); // Add b to a’s list.
    adj[b].push_back({a,c}); // Add c to b’s list.
}

void Graph::dfs(int x, int y, int c)
{
    if (vis[x])return;
    vis[x] = 1;
    if (x == y){
        color[c] = 1;//mark this as a possible color to reach s to d 
        return;
    }
    for (int i = 0; i < int(adj[x].size()); i++){
        if (adj[x][i].second == c){    //if the next edge is also of same color
            dfs(adj[x][i].first, y, c);//recursive dfs 
        }
    }
}

// The main function that finds paths between a and b 
// such that all edges are  same colored 
// It uses recursive dfs()
int Graph::UniColorPaths(int a, int b)
{
   //dfs on nodes directly connected to source 
    for (int i = 0; i < int(adj[a].size()); i++){
            dfs(a, b, adj[a][i].second);
            memset(vis, 0, sizeof(vis));//to visit again visited nodes
        }
    int cur = 0;
    for (int i = 0; i <= E; i++)//let we have hundred colors
            cur += color[i];
        
        return(cur);
}


int main()
{
    // Create a graph given in the above diagram
    Graph g(5, 7);
    g.addEdge(1, 2, 1);
    g.addEdge(1, 3, 2);
    g.addEdge(2, 3, 3);
    g.addEdge(2, 4, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 5, 3);
    g.addEdge(4, 5, 2);
    
    int s = 2 ; //source
    int d = 5 ; //destination

   cout << "Number of paths from " << s << "tp" << d << "with unicolor are : ";
   int ans =  g.UniColorPaths( s , d );
   cout << ans << endl;
 
  return 0;
}

[/sourcecode]
Output:
<pre>
3
</pre>
Time Complexity : O(E*(E+V))
